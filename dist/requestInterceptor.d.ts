/**
 * üöÄ Advanced HTTP Request Interceptor
 *
 * Biblioteca profissional para intercepta√ß√£o, monitoramento e logging avan√ßado
 * de requisi√ß√µes HTTP em aplica√ß√µes Express.js
 *
 * @author Eduardo Luiz da Silveira
 * @version 1.0.0
 * @license MIT
 * @description Middleware Express completo com:
 * - ‚úÖ Intercepta√ß√£o total de requisi√ß√µes HTTP
 * - ‚úÖ Sistema de logging avan√ßado com n√≠veis configur√°veis
 * - ‚úÖ M√©tricas de performance por rota em tempo real
 * - ‚úÖ Auditoria autom√°tica para compliance e seguran√ßa
 * - ‚úÖ Detec√ß√£o proativa de requisi√ß√µes lentas
 * - ‚úÖ Suporte completo ao TypeScript
 * - ‚úÖ Zero depend√™ncias externas
 */
import { Request, Response, NextFunction } from 'express';
/**
 * N√≠veis de logging dispon√≠veis
 * - debug: Informa√ß√µes detalhadas para desenvolvimento
 * - info: Informa√ß√µes gerais de opera√ß√£o
 * - warn: Avisos sobre situa√ß√µes potencialmente problem√°ticas
 * - error: Erros que requerem aten√ß√£o imediata
 */
export type LogLevel = 'debug' | 'info' | 'warn' | 'error';
/**
 * Configura√ß√µes do interceptador de requisi√ß√µes HTTP
 *
 * @interface RequestInterceptorOptions
 */
export type RequestInterceptorOptions = {
    /**
     * Define se deve analisar o corpo da requisi√ß√£o
     * @default true
     * @description Quando true, captura e analisa o body das requisi√ß√µes POST/PUT/PATCH
     */
    parseBody?: boolean;
    /**
     * Define o tamanho m√°ximo do corpo da requisi√ß√£o (em bytes)
     * @default 1048576 (1MB)
     * @description Requisi√ß√µes maiores que este limite ser√£o rejeitadas com erro 413
     */
    maxBodySize?: number;
    /**
     * Fun√ß√£o de callback para processar a requisi√ß√£o interceptada
     * @param req - Objeto Request do Express
     * @param parsedData - Dados estruturados da requisi√ß√£o
     * @description Executada ap√≥s cada requisi√ß√£o ser processada
     */
    onRequest?: (req: Request, parsedData: RequestInfo) => void;
    /**
     * Habilita logging detalhado
     * @default true
     * @description Quando true, registra todas as requisi√ß√µes no console ou logger personalizado
     */
    enableLogging?: boolean;
    /**
     * N√≠vel de logging
     * @default 'info'
     * @description Define o n√≠vel m√≠nimo de mensagens que ser√£o registradas
     */
    logLevel?: LogLevel;
    /**
     * Habilita monitoramento de performance
     * @default true
     * @description Coleta m√©tricas de dura√ß√£o, contadores e estat√≠sticas por rota
     */
    enablePerformanceMonitoring?: boolean;
    /**
     * Habilita logging de auditoria (IPs, headers, etc.)
     * @default false
     * @description Registra informa√ß√µes detalhadas para auditoria de seguran√ßa e compliance
     */
    enableAuditLogging?: boolean;
    /**
     * Fun√ß√£o personalizada de logging
     * @param level - N√≠vel da mensagem
     * @param message - Mensagem principal
     * @param data - Dados adicionais (opcional)
     * @description Permite integra√ß√£o com sistemas de logging externos (Winston, Bunyan, etc.)
     */
    customLogger?: (level: LogLevel, message: string, data?: any) => void;
};
/**
 * Informa√ß√µes estruturadas sobre uma requisi√ß√£o HTTP
 *
 * @interface RequestInfo
 * @description Cont√©m todos os dados relevantes sobre uma requisi√ß√£o processada
 */
interface RequestInfo {
    /** M√©todo HTTP (GET, POST, PUT, DELETE, etc.) */
    method: string;
    /** URL completa da requisi√ß√£o incluindo query parameters */
    url: string;
    /** Path da rota (sem query parameters) */
    path: string;
    /** Headers da requisi√ß√£o */
    headers: any;
    /** Query parameters parseados */
    query: any;
    /** Par√¢metros da rota (ex: /users/:id) */
    params: any;
    /** Timestamp ISO da requisi√ß√£o */
    timestamp: string;
    /** IP do cliente que fez a requisi√ß√£o */
    clientIp: string | undefined;
    /** User-Agent do cliente */
    userAgent: string | undefined;
    /** Corpo da requisi√ß√£o (quando parseBody: true) */
    body: any;
    /** Dura√ß√£o da requisi√ß√£o em milissegundos */
    duration?: number;
    /** Tamanho do content-length em bytes */
    contentLength?: number;
    /** Tamanho real do body processado em bytes */
    bodySize?: number;
}
/**
 * M√©tricas de performance por rota
 *
 * @interface RouteMetrics
 * @description Estat√≠sticas detalhadas de performance para cada endpoint
 */
interface RouteMetrics {
    /** N√∫mero total de requisi√ß√µes para esta rota */
    count: number;
    /** Dura√ß√£o total acumulada em milissegundos */
    totalDuration: number;
    /** Dura√ß√£o m√©dia em milissegundos */
    averageDuration: number;
    /** Menor dura√ß√£o registrada em milissegundos */
    minDuration: number;
    /** Maior dura√ß√£o registrada em milissegundos */
    maxDuration: number;
    /** Timestamp da √∫ltima requisi√ß√£o */
    lastRequest: string;
}
/**
 * üìä Sistema de Coleta de M√©tricas (Singleton)
 *
 * Respons√°vel por coletar, armazenar e fornecer estat√≠sticas
 * de performance das requisi√ß√µes HTTP em tempo real.
 *
 * @class MetricsCollector
 * @pattern Singleton
 * @description Garante uma √∫nica inst√¢ncia para coleta centralizada de m√©tricas
 */
declare class MetricsCollector {
    private static instance;
    private routeMetrics;
    /**
     * Retorna a inst√¢ncia singleton do coletor de m√©tricas
     * @returns {MetricsCollector} Inst√¢ncia √∫nica do coletor
     */
    static getInstance(): MetricsCollector;
    /**
     * Atualiza as m√©tricas para uma rota espec√≠fica
     *
     * @param route - Caminho da rota (ex: '/api/users')
     * @param duration - Dura√ß√£o da requisi√ß√£o em milissegundos
     * @param timestamp - Timestamp da requisi√ß√£o
     * @description Calcula automaticamente min, max, m√©dia e contador
     */
    updateMetrics(route: string, duration: number, timestamp: string): void;
    /**
     * Retorna todas as m√©tricas coletadas
     * @returns {Record<string, RouteMetrics>} Objeto com m√©tricas por rota
     */
    getMetrics(): Record<string, RouteMetrics>;
    /**
     * Retorna m√©tricas de uma rota espec√≠fica
     * @param route - Caminho da rota
     * @returns {RouteMetrics | undefined} M√©tricas da rota ou undefined se n√£o existir
     */
    getRouteMetrics(route: string): RouteMetrics | undefined;
}
/**
 * üìù Sistema de Logging Avan√ßado
 *
 * Gerencia todo o sistema de logging da biblioteca com:
 * - N√≠veis configur√°veis de log
 * - Formata√ß√£o autom√°tica de mensagens
 * - Suporte a loggers personalizados
 * - Logs espec√≠ficos para requisi√ß√µes, auditoria e performance
 *
 * @class HttpLogger
 * @description Sistema profissional de logging para aplica√ß√µes em produ√ß√£o
 */
declare class HttpLogger {
    private logLevel;
    private customLogger?;
    /**
     * Cria uma nova inst√¢ncia do logger
     * @param logLevel - N√≠vel m√≠nimo de logging
     * @param customLogger - Fun√ß√£o personalizada de logging (opcional)
     */
    constructor(logLevel?: LogLevel, customLogger?: (level: LogLevel, message: string, data?: any) => void);
    /**
     * Verifica se uma mensagem deve ser registrada baseado no n√≠vel
     * @param level - N√≠vel da mensagem
     * @returns {boolean} true se deve registrar, false caso contr√°rio
     */
    private shouldLog;
    /**
     * Formata uma mensagem de log com timestamp e dados
     * @param level - N√≠vel da mensagem
     * @param message - Mensagem principal
     * @param data - Dados adicionais (opcional)
     * @returns {string} Mensagem formatada
     */
    private formatMessage;
    /**
     * Registra uma mensagem de log
     * @param level - N√≠vel da mensagem
     * @param message - Mensagem principal
     * @param data - Dados adicionais (opcional)
     */
    log(level: LogLevel, message: string, data?: any): void;
    /**
     * Registra informa√ß√µes de uma requisi√ß√£o HTTP
     * @param requestInfo - Dados estruturados da requisi√ß√£o
     */
    logRequest(requestInfo: RequestInfo): void;
    /**
     * Registra informa√ß√µes de auditoria detalhadas
     * @param requestInfo - Dados completos da requisi√ß√£o
     * @description Usado para compliance, seguran√ßa e auditoria
     */
    logAudit(requestInfo: RequestInfo): void;
    /**
     * Registra informa√ß√µes de performance
     * @param route - Rota da requisi√ß√£o
     * @param duration - Dura√ß√£o em milissegundos
     * @description Detecta automaticamente requisi√ß√µes lentas (>1000ms)
     */
    logPerformance(route: string, duration: number): void;
}
/**
 * üîß Middleware Principal - Interceptador de Requisi√ß√µes HTTP
 *
 * Esta √© a fun√ß√£o principal da biblioteca que cria o middleware Express
 * para interceptar e monitorar todas as requisi√ß√µes HTTP.
 *
 * @param options - Configura√ß√µes do interceptador
 * @returns {Function} Middleware Express
 *
 * @example
 * ```javascript
 * const { requestInterceptor } = require('advanced-http-request-interceptor');
 *
 * app.use(requestInterceptor({
 *   enableLogging: true,
 *   enablePerformanceMonitoring: true,
 *   onRequest: (req, requestInfo) => {
 *     console.log(`üì• ${requestInfo.method} ${requestInfo.url}`);
 *   }
 * }));
 * ```
 */
export declare function requestInterceptor(options?: RequestInterceptorOptions): (req: Request, res: Response, next: NextFunction) => void | Response<any, Record<string, any>>;
export { MetricsCollector, HttpLogger };
