"use strict";
/**
 * üöÄ Advanced HTTP Request Interceptor
 *
 * Biblioteca profissional para intercepta√ß√£o, monitoramento e logging avan√ßado
 * de requisi√ß√µes HTTP em aplica√ß√µes Express.js
 *
 * @author Eduardo Luiz da Silveira
 * @version 1.0.0
 * @license MIT
 * @description Middleware Express completo com:
 * - ‚úÖ Intercepta√ß√£o total de requisi√ß√µes HTTP
 * - ‚úÖ Sistema de logging avan√ßado com n√≠veis configur√°veis
 * - ‚úÖ M√©tricas de performance por rota em tempo real
 * - ‚úÖ Auditoria autom√°tica para compliance e seguran√ßa
 * - ‚úÖ Detec√ß√£o proativa de requisi√ß√µes lentas
 * - ‚úÖ Suporte completo ao TypeScript
 * - ‚úÖ Zero depend√™ncias externas
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpLogger = exports.MetricsCollector = void 0;
exports.requestInterceptor = requestInterceptor;
/**
 * üìä Sistema de Coleta de M√©tricas (Singleton)
 *
 * Respons√°vel por coletar, armazenar e fornecer estat√≠sticas
 * de performance das requisi√ß√µes HTTP em tempo real.
 *
 * @class MetricsCollector
 * @pattern Singleton
 * @description Garante uma √∫nica inst√¢ncia para coleta centralizada de m√©tricas
 */
class MetricsCollector {
    constructor() {
        this.routeMetrics = new Map();
    }
    /**
     * Retorna a inst√¢ncia singleton do coletor de m√©tricas
     * @returns {MetricsCollector} Inst√¢ncia √∫nica do coletor
     */
    static getInstance() {
        if (!MetricsCollector.instance) {
            MetricsCollector.instance = new MetricsCollector();
        }
        return MetricsCollector.instance;
    }
    /**
     * Atualiza as m√©tricas para uma rota espec√≠fica
     *
     * @param route - Caminho da rota (ex: '/api/users')
     * @param duration - Dura√ß√£o da requisi√ß√£o em milissegundos
     * @param timestamp - Timestamp da requisi√ß√£o
     * @description Calcula automaticamente min, max, m√©dia e contador
     */
    updateMetrics(route, duration, timestamp) {
        const key = route;
        const existing = this.routeMetrics.get(key);
        if (existing) {
            // Atualiza m√©tricas existentes
            existing.count++;
            existing.totalDuration += duration;
            existing.averageDuration = existing.totalDuration / existing.count;
            existing.minDuration = Math.min(existing.minDuration, duration);
            existing.maxDuration = Math.max(existing.maxDuration, duration);
            existing.lastRequest = timestamp;
        }
        else {
            // Cria nova entrada de m√©tricas
            this.routeMetrics.set(key, {
                count: 1,
                totalDuration: duration,
                averageDuration: duration,
                minDuration: duration,
                maxDuration: duration,
                lastRequest: timestamp
            });
        }
    }
    /**
     * Retorna todas as m√©tricas coletadas
     * @returns {Record<string, RouteMetrics>} Objeto com m√©tricas por rota
     */
    getMetrics() {
        return Object.fromEntries(this.routeMetrics);
    }
    /**
     * Retorna m√©tricas de uma rota espec√≠fica
     * @param route - Caminho da rota
     * @returns {RouteMetrics | undefined} M√©tricas da rota ou undefined se n√£o existir
     */
    getRouteMetrics(route) {
        return this.routeMetrics.get(route);
    }
}
exports.MetricsCollector = MetricsCollector;
/**
 * üìù Sistema de Logging Avan√ßado
 *
 * Gerencia todo o sistema de logging da biblioteca com:
 * - N√≠veis configur√°veis de log
 * - Formata√ß√£o autom√°tica de mensagens
 * - Suporte a loggers personalizados
 * - Logs espec√≠ficos para requisi√ß√µes, auditoria e performance
 *
 * @class HttpLogger
 * @description Sistema profissional de logging para aplica√ß√µes em produ√ß√£o
 */
class HttpLogger {
    /**
     * Cria uma nova inst√¢ncia do logger
     * @param logLevel - N√≠vel m√≠nimo de logging
     * @param customLogger - Fun√ß√£o personalizada de logging (opcional)
     */
    constructor(logLevel = 'info', customLogger) {
        this.logLevel = logLevel;
        this.customLogger = customLogger;
    }
    /**
     * Verifica se uma mensagem deve ser registrada baseado no n√≠vel
     * @param level - N√≠vel da mensagem
     * @returns {boolean} true se deve registrar, false caso contr√°rio
     */
    shouldLog(level) {
        const levels = ['debug', 'info', 'warn', 'error'];
        return levels.indexOf(level) >= levels.indexOf(this.logLevel);
    }
    /**
     * Formata uma mensagem de log com timestamp e dados
     * @param level - N√≠vel da mensagem
     * @param message - Mensagem principal
     * @param data - Dados adicionais (opcional)
     * @returns {string} Mensagem formatada
     */
    formatMessage(level, message, data) {
        const timestamp = new Date().toISOString();
        const baseMessage = `[${timestamp}] [${level.toUpperCase()}] ${message}`;
        if (data) {
            return `${baseMessage}\n${JSON.stringify(data, null, 2)}`;
        }
        return baseMessage;
    }
    /**
     * Registra uma mensagem de log
     * @param level - N√≠vel da mensagem
     * @param message - Mensagem principal
     * @param data - Dados adicionais (opcional)
     */
    log(level, message, data) {
        if (!this.shouldLog(level))
            return;
        if (this.customLogger) {
            // Usa logger personalizado se fornecido
            this.customLogger(level, message, data);
        }
        else {
            // Usa console padr√£o
            const formattedMessage = this.formatMessage(level, message, data);
            switch (level) {
                case 'error':
                    console.error(formattedMessage);
                    break;
                case 'warn':
                    console.warn(formattedMessage);
                    break;
                case 'debug':
                    console.debug(formattedMessage);
                    break;
                default:
                    console.log(formattedMessage);
            }
        }
    }
    /**
     * Registra informa√ß√µes de uma requisi√ß√£o HTTP
     * @param requestInfo - Dados estruturados da requisi√ß√£o
     */
    logRequest(requestInfo) {
        const logData = {
            method: requestInfo.method,
            url: requestInfo.url,
            path: requestInfo.path,
            clientIp: requestInfo.clientIp,
            userAgent: requestInfo.userAgent,
            duration: requestInfo.duration,
            bodySize: requestInfo.bodySize,
            timestamp: requestInfo.timestamp
        };
        this.log('info', `HTTP Request: ${requestInfo.method} ${requestInfo.url}`, logData);
    }
    /**
     * Registra informa√ß√µes de auditoria detalhadas
     * @param requestInfo - Dados completos da requisi√ß√£o
     * @description Usado para compliance, seguran√ßa e auditoria
     */
    logAudit(requestInfo) {
        const auditData = {
            timestamp: requestInfo.timestamp,
            method: requestInfo.method,
            url: requestInfo.url,
            clientIp: requestInfo.clientIp,
            userAgent: requestInfo.userAgent,
            headers: requestInfo.headers,
            body: requestInfo.body,
            duration: requestInfo.duration
        };
        this.log('info', `AUDIT: ${requestInfo.method} ${requestInfo.url} from ${requestInfo.clientIp}`, auditData);
    }
    /**
     * Registra informa√ß√µes de performance
     * @param route - Rota da requisi√ß√£o
     * @param duration - Dura√ß√£o em milissegundos
     * @description Detecta automaticamente requisi√ß√µes lentas (>1000ms)
     */
    logPerformance(route, duration) {
        if (duration > 1000) {
            this.log('warn', `Slow request detected: ${route} took ${duration}ms`);
        }
        else {
            this.log('debug', `Performance: ${route} completed in ${duration}ms`);
        }
    }
}
exports.HttpLogger = HttpLogger;
/**
 * üîß Middleware Principal - Interceptador de Requisi√ß√µes HTTP
 *
 * Esta √© a fun√ß√£o principal da biblioteca que cria o middleware Express
 * para interceptar e monitorar todas as requisi√ß√µes HTTP.
 *
 * @param options - Configura√ß√µes do interceptador
 * @returns {Function} Middleware Express
 *
 * @example
 * ```javascript
 * const { requestInterceptor } = require('advanced-http-request-interceptor');
 *
 * app.use(requestInterceptor({
 *   enableLogging: true,
 *   enablePerformanceMonitoring: true,
 *   onRequest: (req, requestInfo) => {
 *     console.log(`üì• ${requestInfo.method} ${requestInfo.url}`);
 *   }
 * }));
 * ```
 */
function requestInterceptor(options = {}) {
    // üîß Configura√ß√£o com valores padr√£o
    const { parseBody = true, // Analisa o body por padr√£o
    maxBodySize = 1024 * 1024, // 1MB por padr√£o
    onRequest, // Callback personalizado (opcional)
    enableLogging = true, // Logging ativado por padr√£o
    logLevel = 'info', // N√≠vel info por padr√£o
    enablePerformanceMonitoring = true, // M√©tricas ativadas por padr√£o
    enableAuditLogging = false, // Auditoria desativada por padr√£o
    customLogger // Logger personalizado (opcional)
     } = options;
    // üìù Inicializa sistema de logging
    const logger = new HttpLogger(logLevel, customLogger);
    // üìä Inicializa coletor de m√©tricas
    const metricsCollector = MetricsCollector.getInstance();
    // üöÄ Retorna o middleware Express
    return function (req, res, next) {
        // ‚è±Ô∏è Marca o in√≠cio da requisi√ß√£o para calcular dura√ß√£o
        const startTime = Date.now();
        // üìã Coleta informa√ß√µes b√°sicas da requisi√ß√£o
        const requestInfo = {
            method: req.method,
            url: req.url,
            path: req.path || req.url.split('?')[0],
            headers: req.headers,
            query: req.query,
            params: req.params,
            timestamp: new Date().toISOString(),
            clientIp: req.ip || req.socket.remoteAddress || req.headers['x-forwarded-for'],
            userAgent: req.headers['user-agent'],
            body: undefined,
            contentLength: parseInt(req.headers['content-length'] || '0', 10)
        };
        // üö´ Se n√£o quiser analisar o corpo, processa imediatamente
        if (!parseBody) {
            requestInfo.duration = Date.now() - startTime;
            requestInfo.bodySize = 0;
            // üìù Logging da requisi√ß√£o
            if (enableLogging) {
                logger.logRequest(requestInfo);
            }
            // üõ°Ô∏è Logging de auditoria
            if (enableAuditLogging) {
                logger.logAudit(requestInfo);
            }
            // üìä Coleta de m√©tricas de performance
            if (enablePerformanceMonitoring) {
                metricsCollector.updateMetrics(requestInfo.path, requestInfo.duration, requestInfo.timestamp);
                logger.logPerformance(requestInfo.path, requestInfo.duration);
            }
            // üîß Executa callback personalizado
            if (onRequest) {
                onRequest(req, requestInfo);
            }
            return next();
        }
        // üö® Verifica se o corpo √© muito grande (prote√ß√£o contra ataques)
        if (requestInfo.contentLength && requestInfo.contentLength > maxBodySize) {
            logger.log('warn', `Request rejected: payload too large (${requestInfo.contentLength} bytes)`, {
                url: requestInfo.url,
                clientIp: requestInfo.clientIp,
                maxAllowed: maxBodySize
            });
            return res.status(413).json({ error: 'Payload too large' });
        }
        // üì¶ Inicia captura do corpo da requisi√ß√£o
        let body = '';
        // üì° Event listener para dados recebidos
        req.on('data', (chunk) => {
            body += chunk.toString();
            // üõ°Ô∏è Verifica se o corpo se tornou muito grande durante o streaming
            if (body.length > maxBodySize) {
                logger.log('warn', `Request stream terminated: payload exceeded limit during streaming`, {
                    url: requestInfo.url,
                    clientIp: requestInfo.clientIp,
                    actualSize: body.length,
                    maxAllowed: maxBodySize
                });
                req.destroy();
                return res.status(413).json({ error: 'Payload too large' });
            }
        });
        // ‚úÖ Event listener para fim da transmiss√£o
        req.on('end', () => {
            var _a;
            try {
                // ‚è±Ô∏è Calcula a dura√ß√£o total da requisi√ß√£o
                requestInfo.duration = Date.now() - startTime;
                requestInfo.bodySize = body.length;
                // üîç Tenta analisar o corpo como JSON (se aplic√°vel)
                if (body && ((_a = req.headers['content-type']) === null || _a === void 0 ? void 0 : _a.includes('application/json'))) {
                    try {
                        requestInfo.body = JSON.parse(body);
                    }
                    catch (parseError) {
                        requestInfo.body = body;
                        logger.log('warn', `Failed to parse JSON body for ${requestInfo.url}`, {
                            error: parseError,
                            bodyPreview: body.substring(0, 100)
                        });
                    }
                }
                else {
                    requestInfo.body = body;
                }
                // üìù Logging detalhado da requisi√ß√£o
                if (enableLogging) {
                    logger.logRequest(requestInfo);
                }
                // üõ°Ô∏è Logging de auditoria para compliance
                if (enableAuditLogging) {
                    logger.logAudit(requestInfo);
                }
                // üìä Coleta de m√©tricas de performance
                if (enablePerformanceMonitoring) {
                    metricsCollector.updateMetrics(requestInfo.path, requestInfo.duration, requestInfo.timestamp);
                    logger.logPerformance(requestInfo.path, requestInfo.duration);
                }
                // üîß Executa callback personalizado se fornecido
                if (onRequest) {
                    onRequest(req, requestInfo);
                }
                // ‚û°Ô∏è Continua para o pr√≥ximo middleware
                next();
            }
            catch (error) {
                // üö® Tratamento de erros durante o processamento
                logger.log('error', `Error processing request ${requestInfo.url}`, error);
                next(error);
            }
        });
        // üö® Event listener para erros na requisi√ß√£o
        req.on('error', (error) => {
            logger.log('error', `Request error for ${requestInfo.url}`, {
                error: error.message,
                clientIp: requestInfo.clientIp
            });
            next(error);
        });
    };
}
