/**
 * üß™ Teste R√°pido para Build/Publish
 * 
 * Este teste verifica se a biblioteca pode ser importada e usada corretamente
 * sem iniciar um servidor persistente, ideal para workflows de CI/CD.
 */

const express = require('express');
const { requestInterceptor, MetricsCollector, HttpLogger } = require('../dist');

console.log('üß™ Iniciando teste r√°pido da biblioteca...');

// Teste 1: Verificar se todas as exporta√ß√µes est√£o dispon√≠veis
console.log('\n1. ‚úÖ Verificando exporta√ß√µes...');
if (typeof requestInterceptor !== 'function') {
  throw new Error('requestInterceptor n√£o √© uma fun√ß√£o');
}
if (typeof MetricsCollector !== 'function') {
  throw new Error('MetricsCollector n√£o √© uma fun√ß√£o');
}
if (typeof HttpLogger !== 'function') {
  throw new Error('HttpLogger n√£o √© uma fun√ß√£o');
}
console.log('   ‚úÖ Todas as exporta√ß√µes est√£o corretas');

// Teste 2: Verificar se o middleware pode ser criado
console.log('\n2. ‚úÖ Testando cria√ß√£o do middleware...');
const middleware = requestInterceptor({
  enableLogging: true,
  enablePerformanceMonitoring: true,
  enableAuditLogging: false
});
if (typeof middleware !== 'function') {
  throw new Error('requestInterceptor() n√£o retornou uma fun√ß√£o de middleware');
}
console.log('   ‚úÖ Middleware criado com sucesso');

// Teste 3: Verificar sistema de m√©tricas
console.log('\n3. ‚úÖ Testando sistema de m√©tricas...');
const metricsCollector = MetricsCollector.getInstance();
if (!metricsCollector || typeof metricsCollector.getMetrics !== 'function') {
  throw new Error('MetricsCollector n√£o est√° funcionando corretamente');
}
console.log('   ‚úÖ Sistema de m√©tricas funcionando');

// Teste 4: Verificar sistema de logging
console.log('\n4. ‚úÖ Testando sistema de logging...');
const logger = new HttpLogger('info');
if (!logger || typeof logger.log !== 'function') {
  throw new Error('HttpLogger n√£o est√° funcionando corretamente');
}
console.log('   ‚úÖ Sistema de logging funcionando');

// Teste 5: Verificar se pode ser usado com Express
console.log('\n5. ‚úÖ Testando integra√ß√£o com Express...');
const app = express();
try {
  app.use(requestInterceptor({
    parseBody: true,
    enableLogging: false // Silencioso para o teste
  }));
  console.log('   ‚úÖ Integra√ß√£o com Express funcionando');
} catch (error) {
  throw new Error(`Erro na integra√ß√£o com Express: ${error.message}`);
}

// Teste 6: Verificar configura√ß√µes padr√£o
console.log('\n6. ‚úÖ Testando configura√ß√µes padr√£o...');
const defaultMiddleware = requestInterceptor();
if (typeof defaultMiddleware !== 'function') {
  throw new Error('Configura√ß√µes padr√£o n√£o funcionam');
}
console.log('   ‚úÖ Configura√ß√µes padr√£o funcionando');

console.log('\nüéâ Todos os testes passaram com sucesso!');
console.log('‚úÖ A biblioteca est√° pronta para ser publicada');
console.log('üì¶ Imports: OK');
console.log('üîß Middleware: OK'); 
console.log('üìä M√©tricas: OK');
console.log('üìù Logging: OK');
console.log('üöÄ Express: OK');

process.exit(0); 